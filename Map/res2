Map Test
Test Insert
map.size() = 9 |TOP = i |LOWER = a
Print data in map via iterator:
[a] = 3
[b] = 2
[c] = 5
[d] = 4
[e] = 6
[f] = 1
[g] = 7
[h] = 9
[i] = 8

Add values in map2 with range iterator:
Print data in map2 via iterator:
[d] = 4
[e] = 6
[f] = 1
[g] = 7
[h] = 9
[i] = 8
map.size() = 6

Add three first values of map into map2 with hint:
Print data in map2 via iterator:
[a] = 3
[b] = 2
[c] = 5
[d] = 4
[e] = 6
[f] = 1
[g] = 7
[h] = 9
[i] = 8
map.size() = 9
Erase begin() and last member of map being: a and i
Begin :
End-- :
Print data in map via iterator:
[b] = 2
[c] = 5
[d] = 4
[e] = 6
[f] = 1
[g] = 7
[h] = 9
map.size() = 7
Erase begin()+2 to end()-3 from map: d to f
Print data in map via iterator:
[b] = 2
[c] = 5
[f] = 1
[g] = 7
[h] = 9
Erasing g via key
Print data in map via iterator:
[b] = 2
[c] = 5
[f] = 1
[h] = 9
Testing all iterator type:
[c] = 5
[c] = 5
[f] = 1
[f] = 1
Testing empty, size & clear
map size: 4 empty ? 0
map size: 0 empty ? 1

Testing swap & clear
Map1 size: 9 Map2 size: 0
After swap:
Map1 size: 0 Map2 size: 9

Print data in map via iterator:
Map1 size: 6 Map2 size: 9
After swap:
Map1 size: 9 Map2 size: 6

After clear:
Map1 size: 0 Map2 size: 0

Testing key_comp & value_comp
Different key: 1:0
Same key: 0
a => 3
b => 2
c => 5
d => 4
e => 6
f => 1
g => 7
h => 9
i => 8

Testing find()
a 3:3
c 5:5
o 1:1
Testing count()
a 1:1
c 1:1
o 0:0
Testing upper&lower_bound()
Erase lower_bound(b) && upper_bound(d)
Values: b | e
a => 20
e => 100
Testing equal_range()
lower bound points to: b => 20
upper bound points to: c => 30
The allocated array has a size of 40 bytes.
